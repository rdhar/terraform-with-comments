name: Terraform with Comments â€” Reusable Workflow

on: # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows
  workflow_call:
    secrets:
      env_vars:
        description: Environment variables passed into this workflow.
        required: false

concurrency: # Allow queued workflow on this PR to interrupt previous runs.
  group: ${{ github.workflow }}@${{ github.event.issue.number }}
  cancel-in-progress: true

jobs:
  parse: # Parse terraform command(s) from comment to run in subsequent job.
    if: startsWith(github.event.comment.body, '-terraform=')
    runs-on: ubuntu-latest

    outputs:
      commands: ${{ steps.parse_comment.outputs.result }}

    steps:
      - name: Parse comment
        id: parse_comment
        if: github.event.issue.pull_request
        uses: actions/github-script@d7906e4ad0b1822421a7e6a35d5ca353c962f410 # v6.4.1
        env:
          comment: ${{ github.event.comment.body }}
        with:
          script: |
            // Trim whitespace and split comment on newlines.
            return process.env.comment.trim().split("\n").flatMap((command) => {
              // Split string on spaces but ignore spaces inside quotes.
              const args = command.match(/("[^"]+"|[^"\s]+)+/g);
              // Get key/value pairs from args split on "=".
              const result = {};
              args.forEach((arg) => {
                const [key, value] = arg.split("=");
                const parsedKey = key.slice(1);
                if (value) {
                  // Remove double quotes from values.
                  result[parsedKey] = value.replace(/"/g, "");
                } else {
                  // If no value is given for a key, treat as a flag.
                  result[parsedKey] = true;
                }
              });
              return result;
            });

  run: # Run parsed terraform command(s) on the PR branch associated with the comment.
    needs: [parse]
    runs-on: ubuntu-latest

    strategy: # Run for each terraform command completely to release state lock.
      fail-fast: false
      matrix:
        in: ${{ fromJSON(needs.parse.outputs.commands) }}

    permissions:
      contents: read # Required by actions/checkout.
      issues: read # Required by xt0rted/pull-request-comment-branch.
      pull-requests: write # Required by dflook/terraform-*.

    steps:
      - name: Get branch from PR comment
        id: get_branch
        uses: xt0rted/pull-request-comment-branch@d97294d304604fa98a2600a6e2f916a84b596dc7 # v2.0.0

      - name: Checkout PR branch
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
        with:
          ref: ${{ steps.get_branch.outputs.head_ref }}

      - name: Set environment variables
        env:
          env_vars: ${{ secrets.env_vars }}
        run: |
          for i in $env_vars; do
            echo ::add-mask::${i/*=/};
            printf '%s\n' $i >> $GITHUB_ENV;
          done

      - name: Terraform workspace
        if: ${{ matrix.in['workspace'] }}
        uses: dflook/terraform-new-workspace@d84f6bd79aaabf445de2497feeaa7ca37b3941f8 # v1.34.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          backend_config_file: ${{ matrix.in['backend-config'] != '' && format('{0}/{1}', matrix.in['chdir'], matrix.in['backend-config']) || '' }}
          path: ${{ matrix.in['chdir'] }}
          workspace: ${{ matrix.in['workspace'] }}

      - name: Terraform plan
        if: matrix.in['terraform'] == 'plan'
        uses: dflook/terraform-plan@f0212c2a3ea84e7f8a11cdc4187e8ebf3c426c0e # v1.34.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          backend_config_file: ${{ matrix.in['backend-config'] != '' && format('{0}/{1}', matrix.in['chdir'], matrix.in['backend-config']) || '' }}
          destroy: ${{ matrix.in['destroy'] }}
          label: ${{ matrix.in['chdir'] }}
          parallelism: ${{ matrix.in['parallelism'] }}
          path: ${{ matrix.in['chdir'] }}
          replace: ${{ matrix.in['replace'] }}
          target: ${{ matrix.in['target'] }}
          var_file: ${{ matrix.in['var-file'] != '' && format('{0}/{1}', matrix.in['chdir'], matrix.in['var-file']) || '' }}
          workspace: ${{ matrix.in['workspace'] || 'default' }}

      - name: Terraform apply
        id: terraform_apply
        if: matrix.in['terraform'] == 'apply'
        uses: dflook/terraform-apply@cebeca097cfb296baa87aa500fc2973111b9f99a # v1.34.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          auto_approve: ${{ matrix.in['auto-approve'] }}
          backend_config_file: ${{ matrix.in['backend-config'] != '' && format('{0}/{1}', matrix.in['chdir'], matrix.in['backend-config']) || '' }}
          destroy: ${{ matrix.in['destroy'] }}
          label: ${{ matrix.in['chdir'] }}
          parallelism: ${{ matrix.in['parallelism'] }}
          path: ${{ matrix.in['chdir'] }}
          replace: ${{ matrix.in['replace'] }}
          target: ${{ matrix.in['target'] }}
          var_file: ${{ matrix.in['var-file'] != '' && format('{0}/{1}', matrix.in['chdir'], matrix.in['var-file']) || '' }}
          workspace: ${{ matrix.in['workspace'] || 'default' }}
